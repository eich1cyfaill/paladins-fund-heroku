{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nexport const useChampions = (champions, query, sort) => {\n  _s();\n\n  const sortedChampions = useSortedChampions(champions, sort);\n  const sortedAndSearchedChampions = useMemo(() => {\n    return sortedChampions.filter(ch => ch.name.toLowerCase().includes(query.toLowerCase()));\n  }, [query, sortedChampions]);\n  return sortedAndSearchedChampions;\n};\n\n_s(useChampions, \"13cMPOROngWS9P6nWWX6yf903BA=\", false, function () {\n  return [useSortedChampions];\n});\n\nconst useSortedChampions = (champions, sort) => {\n  _s2();\n\n  const classSortedChampions = useChampionsClassSorted(champions, sort);\n  const sortedChampions = useMemo(() => {\n    if (sort) {\n      return [...classSortedChampions].sort((a, b) => a.name.localeCompare(b.name));\n    } else {\n      return [...classSortedChampions].sort((a, b) => a.name.localeCompare(b.name));\n    }\n  }, [champions, sort]);\n  return sortedChampions;\n};\n\n_s2(useSortedChampions, \"CYGUFBiMZGzie1gwjDy5vl05Ecw=\", false, function () {\n  return [useChampionsClassSorted];\n});\n\nconst useChampionsClassSorted = (champions, sort) => {\n  _s3();\n\n  const useSortedChampionsByClass = useMemo(() => {\n    const champArray = [];\n    champions.map(ch => {\n      if (sort == '') {\n        champArray.push(ch);\n      } else {\n        if (ch.role == sort) {\n          champArray.push(ch);\n        }\n      }\n    });\n    return champArray;\n  }, [champions, sort]);\n  return useSortedChampionsByClass;\n};\n\n_s3(useChampionsClassSorted, \"1GDuroHXexuymyTWQBXcm9TpIxU=\");","map":{"version":3,"sources":["D:/PetPS/react-ts-paladins-fund/src/hooks/useChampions.ts"],"names":["useMemo","useChampions","champions","query","sort","sortedChampions","useSortedChampions","sortedAndSearchedChampions","filter","ch","name","toLowerCase","includes","classSortedChampions","useChampionsClassSorted","a","b","localeCompare","useSortedChampionsByClass","champArray","map","push","role"],"mappings":";;;;AACA,SAASA,OAAT,QAAwB,OAAxB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,SAAD,EAA8BC,KAA9B,EAA6CC,IAA7C,KAAgF;AAAA;;AAExG,QAAMC,eAAe,GAAGC,kBAAkB,CAACJ,SAAD,EAAYE,IAAZ,CAA1C;AACA,QAAMG,0BAA0B,GAAGP,OAAO,CAAC,MAAM;AAC7C,WAAOK,eAAe,CAACG,MAAhB,CAAuBC,EAAE,IAAIA,EAAE,CAACC,IAAH,CAAQC,WAAR,GAAsBC,QAAtB,CAA+BT,KAAK,CAACQ,WAAN,EAA/B,CAA7B,CAAP;AACH,GAFyC,EAEvC,CAACR,KAAD,EAAQE,eAAR,CAFuC,CAA1C;AAGA,SAAOE,0BAAP;AACH,CAPM;;GAAMN,Y;UAEeK,kB;;;AAO5B,MAAMA,kBAAkB,GAAG,CAACJ,SAAD,EAA8BE,IAA9B,KAA+C;AAAA;;AACtE,QAAMS,oBAA2B,GAAGC,uBAAuB,CAACZ,SAAD,EAAYE,IAAZ,CAA3D;AACA,QAAMC,eAAe,GAAGL,OAAO,CAAC,MAAM;AAClC,QAAGI,IAAH,EAAQ;AACJ,aAAO,CAAC,GAAGS,oBAAJ,EAA0BT,IAA1B,CAA+B,CAACW,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACL,IAAF,CAAOO,aAAP,CAAqBD,CAAC,CAACN,IAAvB,CAAzC,CAAP;AACH,KAFD,MAEO;AACH,aAAO,CAAC,GAAGG,oBAAJ,EAA0BT,IAA1B,CAA+B,CAACW,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACL,IAAF,CAAOO,aAAP,CAAqBD,CAAC,CAACN,IAAvB,CAAzC,CAAP;AACH;AACJ,GAN8B,EAM5B,CAACR,SAAD,EAAYE,IAAZ,CAN4B,CAA/B;AAOA,SAAOC,eAAP;AACH,CAVD;;IAAMC,kB;UACkCQ,uB;;;AAWxC,MAAMA,uBAAuB,GAAG,CAACZ,SAAD,EAA8BE,IAA9B,KAA+C;AAAA;;AAC3E,QAAMc,yBAAyB,GAAGlB,OAAO,CAAC,MAAM;AAC5C,UAAMmB,UAA4B,GAAG,EAArC;AACAjB,IAAAA,SAAS,CAACkB,GAAV,CAAcX,EAAE,IAAI;AAChB,UAAGL,IAAI,IAAI,EAAX,EAAc;AAACe,QAAAA,UAAU,CAACE,IAAX,CAAgBZ,EAAhB;AAAoB,OAAnC,MAAyC;AACrC,YAAGA,EAAE,CAACa,IAAH,IAAWlB,IAAd,EAAmB;AACfe,UAAAA,UAAU,CAACE,IAAX,CAAgBZ,EAAhB;AACH;AACJ;AACJ,KAND;AAOA,WAAOU,UAAP;AACH,GAVwC,EAUtC,CAACjB,SAAD,EAAYE,IAAZ,CAVsC,CAAzC;AAWA,SAAOc,yBAAP;AACH,CAbD;;IAAMJ,uB","sourcesContent":["import { ChampionObject } from \"../types/championListTypes\";\r\nimport { useMemo } from \"react\";\r\n\r\nexport const useChampions = (champions: ChampionObject[], query: string, sort: string): ChampionObject[] => {\r\n\r\n    const sortedChampions = useSortedChampions(champions, sort)\r\n    const sortedAndSearchedChampions = useMemo(() => {\r\n        return sortedChampions.filter(ch => ch.name.toLowerCase().includes(query.toLowerCase()))\r\n    }, [query, sortedChampions])\r\n    return sortedAndSearchedChampions\r\n}\r\n\r\nconst useSortedChampions = (champions: ChampionObject[], sort: string) => {\r\n    const classSortedChampions: any[] = useChampionsClassSorted(champions, sort)\r\n    const sortedChampions = useMemo(() => {\r\n        if(sort){\r\n            return [...classSortedChampions].sort((a, b) => a.name.localeCompare(b.name))\r\n        } else {\r\n            return [...classSortedChampions].sort((a, b) => a.name.localeCompare(b.name))\r\n        }\r\n    }, [champions, sort])\r\n    return sortedChampions\r\n}\r\n\r\nconst useChampionsClassSorted = (champions: ChampionObject[], sort: string) => {\r\n    const useSortedChampionsByClass = useMemo(() => {\r\n        const champArray: ChampionObject[] = []\r\n        champions.map(ch => {\r\n            if(sort == ''){champArray.push(ch)} else {\r\n                if(ch.role == sort){\r\n                    champArray.push(ch)\r\n                }\r\n            }\r\n        })\r\n        return champArray\r\n    }, [champions, sort])\r\n    return useSortedChampionsByClass\r\n}"]},"metadata":{},"sourceType":"module"}