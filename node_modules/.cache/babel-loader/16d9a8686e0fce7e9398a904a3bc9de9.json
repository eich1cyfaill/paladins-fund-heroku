{"ast":null,"code":"import { PlayerInfoTypes } from \"../../types/playerInfoTypes\";\nimport axios from \"axios\";\nimport { signatureDI, signature, signatureAPI } from \"../../lib/signature\";\nimport { resDate } from \"../../lib/date\";\nimport { totalWinrateFractions } from \"../../lib/totalWinrateFractions\";\nexport const acGetPlayer = (name, sessionID) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: PlayerInfoTypes.FETCH_PLAYER\n      });\n      const response = await axios.get(`https://cors-anywhere.herokuapp.com/https://api.paladins.com/paladinsapi.svc/getplayerjson/${signatureDI}/${signature(signatureDI, \"getplayer\", signatureAPI, resDate())}/${sessionID}/${resDate()}/${name}`);\n      totalWinrateFractions(response.data[0].Wins, response.data[0].Losses, response.data[0].RankedKBM.Wins, response.data[0].RankedKBM.Losses);\n      dispatch({\n        type: PlayerInfoTypes.FETCH_PLAYER_SUCCESS,\n        payload: response.data[0]\n      });\n    } catch (e) {\n      dispatch({\n        type: PlayerInfoTypes.FETCH_PLAYER_ERROR\n      });\n    }\n  };\n};\nexport const acGetPlayerChampionRanks = (name, sessionID) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: PlayerInfoTypes.FETCH_PLAYER_CHAMPION_RANKS\n      });\n      const response = await axios.get(`https://cors-anywhere.herokuapp.com/https://api.paladins.com/paladinsapi.svc/getchampionranksjson/${signatureDI}/${signature(signatureDI, \"getchampionranks\", signatureAPI, resDate())}/${sessionID}/${resDate()}/${name}`);\n      const responseBatch = response.data.slice(0, 5);\n      await dispatch({\n        type: PlayerInfoTypes.FETCH_PLAYER_CHAMPION_RANKS_SUCCESS,\n        payload: response.data\n      });\n      dispatch({\n        type: PlayerInfoTypes.FETCH_PLAYER_CHAMPION_RANKS_BATCH,\n        payload: responseBatch\n      });\n    } catch (e) {\n      dispatch({\n        type: PlayerInfoTypes.FETCH_PLAYER_CHAMPION_RANKS_ERROR,\n        payload: 'ERROR GET CHAMPION RANKS'\n      });\n    }\n  };\n};\nexport const acGetPlayerStatus = (name, sessionID) => {\n  return async dispatch => {\n    try {\n      const response = await axios.get(`https://cors-anywhere.herokuapp.com/https://api.paladins.com/paladinsapi.svc/getplayerstatusjson/${signatureDI}/${signature(signatureDI, \"getplayerstatus\", signatureAPI, resDate())}/${sessionID}/${resDate()}/${name}`);\n      await dispatch({\n        type: PlayerInfoTypes.GET_PLAYER_STATUS,\n        payload: response.data[0].status\n      });\n      await dispatch({\n        type: PlayerInfoTypes.GET_PLAYER_STATUS_DESC,\n        payload: response.data[0].status_string\n      });\n      dispatch({\n        type: PlayerInfoTypes.GET_PLAYER_STATUS_SUCCESS\n      });\n    } catch (e) {}\n  };\n};\nexport const acGetMatchHistory = (name, sessionID) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: PlayerInfoTypes.GET_PLAYER_MATCH_HISTORY\n      });\n      const response = await axios.get(`https://cors-anywhere.herokuapp.com/https://api.paladins.com/paladinsapi.svc/getmatchhistoryjson/${signatureDI}/${signature(signatureDI, \"getmatchhistory\", signatureAPI, resDate())}/${sessionID}/${resDate()}/${name}`);\n      dispatch({\n        type: PlayerInfoTypes.GET_PLAYER_MATCH_HISTORY_SUCCESS,\n        payload: response.data\n      });\n    } catch (e) {}\n  };\n};\nexport const acFetchCurrentPickedMatchId = matchId => {\n  return dispatch => {\n    dispatch({\n      type: PlayerInfoTypes.FETCH_CURRENT_PICKED_MATCH_ID,\n      payload: matchId\n    });\n  };\n};\nexport const playerInfoUnmountPlayerNotFound = () => {\n  return dispatch => {\n    dispatch({\n      type: PlayerInfoTypes.UNMOUNT_PLAYER_NOT_FOUND\n    });\n  };\n};","map":{"version":3,"sources":["D:/PetPS/react-ts-paladins-fund/src/store/actionCreators/playerInfoAC.ts"],"names":["PlayerInfoTypes","axios","signatureDI","signature","signatureAPI","resDate","totalWinrateFractions","acGetPlayer","name","sessionID","dispatch","type","FETCH_PLAYER","response","get","data","Wins","Losses","RankedKBM","FETCH_PLAYER_SUCCESS","payload","e","FETCH_PLAYER_ERROR","acGetPlayerChampionRanks","FETCH_PLAYER_CHAMPION_RANKS","responseBatch","slice","FETCH_PLAYER_CHAMPION_RANKS_SUCCESS","FETCH_PLAYER_CHAMPION_RANKS_BATCH","FETCH_PLAYER_CHAMPION_RANKS_ERROR","acGetPlayerStatus","GET_PLAYER_STATUS","status","GET_PLAYER_STATUS_DESC","status_string","GET_PLAYER_STATUS_SUCCESS","acGetMatchHistory","GET_PLAYER_MATCH_HISTORY","GET_PLAYER_MATCH_HISTORY_SUCCESS","acFetchCurrentPickedMatchId","matchId","FETCH_CURRENT_PICKED_MATCH_ID","playerInfoUnmountPlayerNotFound","UNMOUNT_PLAYER_NOT_FOUND"],"mappings":"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","sourcesContent":["import { Dispatch } from \"redux\"\r\nimport { PlayerInfoAction, PlayerInfoTypes } from \"../../types/playerInfoTypes\"\r\nimport axios from \"axios\"\r\nimport { signatureDI, signature, signatureAPI } from \"../../lib/signature\"\r\nimport { resDate } from \"../../lib/date\"\r\nimport { totalWinrateFractions } from \"../../lib/totalWinrateFractions\"\r\n\r\nexport const acGetPlayer = (name: string | undefined, sessionID: string) => {\r\n    return async (dispatch: Dispatch<PlayerInfoAction>) => {\r\n        try {\r\n            dispatch({type: PlayerInfoTypes.FETCH_PLAYER})\r\n            const response = await axios.get(`https://cors-anywhere.herokuapp.com/https://api.paladins.com/paladinsapi.svc/getplayerjson/${signatureDI}/${signature(signatureDI, \"getplayer\", signatureAPI, resDate())}/${sessionID}/${resDate()}/${name}`)\r\n            totalWinrateFractions(response.data[0].Wins, response.data[0].Losses, response.data[0].RankedKBM.Wins, response.data[0].RankedKBM.Losses)\r\n            dispatch({type: PlayerInfoTypes.FETCH_PLAYER_SUCCESS, payload: response.data[0]})\r\n        } catch (e) {\r\n            dispatch({type: PlayerInfoTypes.FETCH_PLAYER_ERROR})\r\n        }\r\n    }\r\n}\r\n\r\nexport const acGetPlayerChampionRanks = (name: string | undefined, sessionID: string) => {\r\n    return async (dispatch: Dispatch<PlayerInfoAction>) => {\r\n        try {\r\n            dispatch({type: PlayerInfoTypes.FETCH_PLAYER_CHAMPION_RANKS})\r\n            const response = await axios.get(`https://cors-anywhere.herokuapp.com/https://api.paladins.com/paladinsapi.svc/getchampionranksjson/${signatureDI}/${signature(signatureDI, \"getchampionranks\", signatureAPI, resDate())}/${sessionID}/${resDate()}/${name}`)\r\n            const responseBatch = response.data.slice(0, 5)\r\n            await dispatch({type: PlayerInfoTypes.FETCH_PLAYER_CHAMPION_RANKS_SUCCESS, payload: response.data})\r\n            dispatch({type: PlayerInfoTypes.FETCH_PLAYER_CHAMPION_RANKS_BATCH, payload: responseBatch})\r\n        } catch (e) {\r\n            dispatch({type: PlayerInfoTypes.FETCH_PLAYER_CHAMPION_RANKS_ERROR, payload: 'ERROR GET CHAMPION RANKS'})\r\n        }\r\n    }\r\n}\r\n\r\nexport const acGetPlayerStatus = (name: string | undefined, sessionID: string) => {\r\n    return async (dispatch: Dispatch<PlayerInfoAction>) => {\r\n        try {\r\n            const response = await axios.get(`https://cors-anywhere.herokuapp.com/https://api.paladins.com/paladinsapi.svc/getplayerstatusjson/${signatureDI}/${signature(signatureDI, \"getplayerstatus\", signatureAPI, resDate())}/${sessionID}/${resDate()}/${name}`)\r\n            await dispatch({type: PlayerInfoTypes.GET_PLAYER_STATUS, payload: response.data[0].status})\r\n            await dispatch({type: PlayerInfoTypes.GET_PLAYER_STATUS_DESC, payload: response.data[0].status_string})\r\n            dispatch({type: PlayerInfoTypes.GET_PLAYER_STATUS_SUCCESS})\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const acGetMatchHistory = (name: string | undefined, sessionID: string) => {\r\n    return async (dispatch: Dispatch<PlayerInfoAction>) => {\r\n        try {\r\n            dispatch({type: PlayerInfoTypes.GET_PLAYER_MATCH_HISTORY})\r\n            const response = await axios.get(`https://cors-anywhere.herokuapp.com/https://api.paladins.com/paladinsapi.svc/getmatchhistoryjson/${signatureDI}/${signature(signatureDI, \"getmatchhistory\", signatureAPI, resDate())}/${sessionID}/${resDate()}/${name}`)\r\n            dispatch({type: PlayerInfoTypes.GET_PLAYER_MATCH_HISTORY_SUCCESS, payload: response.data})\r\n        } catch(e) {\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const acFetchCurrentPickedMatchId = (matchId: number) => {\r\n    return (dispatch: Dispatch<PlayerInfoAction>) => {\r\n        dispatch({type: PlayerInfoTypes.FETCH_CURRENT_PICKED_MATCH_ID, payload: matchId})\r\n    }\r\n}\r\n\r\nexport const playerInfoUnmountPlayerNotFound = () => {\r\n    return (dispatch: Dispatch<PlayerInfoAction>) => {\r\n        dispatch({type: PlayerInfoTypes.UNMOUNT_PLAYER_NOT_FOUND})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}