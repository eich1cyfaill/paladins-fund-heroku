{"ast":null,"code":"var _jsxFileName = \"D:\\\\PetPS\\\\react-ts-paladins-fund\\\\src\\\\components\\\\Ranking\\\\Ranking.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport cl from '../../styles/Ranking.module.sass';\nimport { useActions } from '../../hooks/useActions';\nimport { useTypeSelector } from '../../hooks/useTypeSelector';\nimport PfLoader from '../../userinterface/Loader/pfLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Ranking = () => {\n  _s();\n\n  const {\n    rankingFetchBestPlayers\n  } = useActions();\n  const {\n    sessionID\n  } = useTypeSelector(state => state.devReducer);\n  const {\n    isLoading,\n    bestPlayers\n  } = useTypeSelector(state => state.rankingReducer);\n  const [unknownPlayerShowed, setUnknownPlayerShowed] = useState(0);\n  useEffect(() => {\n    rankingFetchBestPlayers(sessionID);\n  }, []);\n\n  const toggleUnknownPlayerView = itemId => {\n    if (unknownPlayerShowed == itemId) {\n      return setUnknownPlayerShowed(0);\n    }\n\n    setUnknownPlayerShowed(itemId);\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(PfLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: cl.ranking__exampleholder,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Points\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Wins\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Losses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cl.ranking__itemWrapper,\n      children: bestPlayers.map((player, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cl.ranking__item,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: cl.ranking__item_number,\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cl.ranking__item_name,\n          children: player.Name ? player.Name : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cl.unknownPlayer,\n            onClick: e => e.stopPropagation(),\n            onMouseOver: () => toggleUnknownPlayerView(+player.Wins + player.Losses + player.Points),\n            onMouseOut: () => toggleUnknownPlayerView(+player.Wins + player.Losses + player.Points),\n            children: [\"unknown player ?\", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: cl.unknownPlayerHint,\n              style: unknownPlayerShowed == +player.Wins + player.Losses + player.Points ? {\n                display: \"block\"\n              } : {\n                display: \"none\"\n              },\n              children: \"Seems like Paladins API doesnt return nickname of this player, cause of player desire. We cant do anything to provide nickname of player for you.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 58\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cl.ranking__item_points,\n          children: [player.Points, \" TP\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cl.ranking__item_wins,\n          children: player.Wins\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cl.ranking__item_losses,\n          children: player.Losses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this)]\n      }, player.player_id + index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Ranking, \"V6XZMGjmEg5vyYS9A5a4eHVgWhI=\", false, function () {\n  return [useActions, useTypeSelector, useTypeSelector];\n});\n\n_c = Ranking;\nexport default Ranking;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ranking\");","map":{"version":3,"sources":["D:/PetPS/react-ts-paladins-fund/src/components/Ranking/Ranking.tsx"],"names":["React","useEffect","useState","cl","useActions","useTypeSelector","PfLoader","Ranking","rankingFetchBestPlayers","sessionID","state","devReducer","isLoading","bestPlayers","rankingReducer","unknownPlayerShowed","setUnknownPlayerShowed","toggleUnknownPlayerView","itemId","ranking__exampleholder","ranking__itemWrapper","map","player","index","ranking__item","ranking__item_number","ranking__item_name","Name","unknownPlayer","e","stopPropagation","Wins","Losses","Points","unknownPlayerHint","display","ranking__item_points","ranking__item_wins","ranking__item_losses","player_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kCAAf;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,OAAOC,QAAP,MAAqB,qCAArB;;;AAEA,MAAMC,OAAiB,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAACC,IAAAA;AAAD,MAA4BJ,UAAU,EAA5C;AACA,QAAM;AAACK,IAAAA;AAAD,MAAcJ,eAAe,CAACK,KAAK,IAAIA,KAAK,CAACC,UAAhB,CAAnC;AACA,QAAM;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAA2BR,eAAe,CAACK,KAAK,IAAIA,KAAK,CAACI,cAAhB,CAAhD;AACA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDd,QAAQ,CAAC,CAAD,CAA9D;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,uBAAuB,CAACC,SAAD,CAAvB;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMQ,uBAAuB,GAAIC,MAAD,IAAoB;AAChD,QAAGH,mBAAmB,IAAIG,MAA1B,EAAiC;AAC7B,aAAOF,sBAAsB,CAAC,CAAD,CAA7B;AACH;;AACDA,IAAAA,sBAAsB,CAACE,MAAD,CAAtB;AACH,GALD;;AAOA,MAAGN,SAAH,EAAa;AACT,wBAAO,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAGD,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAET,EAAE,CAACgB,sBAAnB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI;AAAK,MAAA,SAAS,EAAEhB,EAAE,CAACiB,oBAAnB;AAAA,gBACKP,WAAW,CAACQ,GAAZ,CAAgB,CAACC,MAAD,EAASC,KAAT,kBACb;AAAK,QAAA,SAAS,EAAEpB,EAAE,CAACqB,aAAnB;AAAA,gCACI;AAAK,UAAA,SAAS,EAAErB,EAAE,CAACsB,oBAAnB;AAAA,oBAA0CF,KAAK,GAAG;AAAlD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAEpB,EAAE,CAACuB,kBAAnB;AAAA,oBACKJ,MAAM,CAACK,IAAP,GAAcL,MAAM,CAACK,IAArB,gBAA4B;AAAK,YAAA,SAAS,EAAExB,EAAE,CAACyB,aAAnB;AAAkC,YAAA,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACC,eAAF,EAAhD;AAAqE,YAAA,WAAW,EAAE,MAAMb,uBAAuB,CAAC,CAACK,MAAM,CAACS,IAAR,GAAeT,MAAM,CAACU,MAAtB,GAA+BV,MAAM,CAACW,MAAvC,CAA/G;AAA+J,YAAA,UAAU,EAAE,MAAMhB,uBAAuB,CAAC,CAACK,MAAM,CAACS,IAAR,GAAeT,MAAM,CAACU,MAAtB,GAA+BV,MAAM,CAACW,MAAvC,CAAxM;AAAA,wDAEzB;AAAK,cAAA,SAAS,EAAE9B,EAAE,CAAC+B,iBAAnB;AAAsC,cAAA,KAAK,EAAEnB,mBAAmB,IAAI,CAACO,MAAM,CAACS,IAAR,GAAeT,MAAM,CAACU,MAAtB,GAA+BV,MAAM,CAACW,MAA7D,GAAsE;AAACE,gBAAAA,OAAO,EAAE;AAAV,eAAtE,GAA2F;AAACA,gBAAAA,OAAO,EAAE;AAAV,eAAxI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFyB;AAAA;AAAA;AAAA;AAAA;AAAA;AADjC;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAUI;AAAK,UAAA,SAAS,EAAEhC,EAAE,CAACiC,oBAAnB;AAAA,qBAA0Cd,MAAM,CAACW,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAWI;AAAK,UAAA,SAAS,EAAE9B,EAAE,CAACkC,kBAAnB;AAAA,oBAAwCf,MAAM,CAACS;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAXJ,eAYI;AAAK,UAAA,SAAS,EAAE5B,EAAE,CAACmC,oBAAnB;AAAA,oBAA0ChB,MAAM,CAACU;AAAjD;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA,SAAuCV,MAAM,CAACiB,SAAP,GAAmBhB,KAA1D;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6BH,CAnDD;;GAAMhB,O;UACgCH,U,EACdC,e,EACaA,e;;;KAH/BE,O;AAqDN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport cl from '../../styles/Ranking.module.sass'\r\nimport { useActions } from '../../hooks/useActions';\r\nimport { useTypeSelector } from '../../hooks/useTypeSelector';\r\nimport PfLoader from '../../userinterface/Loader/pfLoader';\r\n\r\nconst Ranking: React.FC = () => {\r\n    const {rankingFetchBestPlayers} = useActions()\r\n    const {sessionID} = useTypeSelector(state => state.devReducer)\r\n    const {isLoading, bestPlayers} = useTypeSelector(state => state.rankingReducer)\r\n    const [unknownPlayerShowed, setUnknownPlayerShowed] = useState(0)\r\n\r\n    useEffect(() => {\r\n        rankingFetchBestPlayers(sessionID)\r\n    }, [])\r\n\r\n    const toggleUnknownPlayerView = (itemId: number) => {\r\n        if(unknownPlayerShowed == itemId){\r\n            return setUnknownPlayerShowed(0)\r\n        }\r\n        setUnknownPlayerShowed(itemId)\r\n    }\r\n\r\n    if(isLoading){\r\n        return <PfLoader />\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={cl.ranking__exampleholder}>\r\n                <div>Number</div>\r\n                <div>Name</div>\r\n                <div>Points</div>\r\n                <div>Wins</div>\r\n                <div>Losses</div>\r\n            </div>\r\n            <div className={cl.ranking__itemWrapper}>\r\n                {bestPlayers.map((player, index) =>\r\n                    <div className={cl.ranking__item} key={player.player_id + index}>\r\n                        <div className={cl.ranking__item_number}>{index + 1}</div>\r\n                        <div className={cl.ranking__item_name}>\r\n                            {player.Name ? player.Name : <div className={cl.unknownPlayer} onClick={e => e.stopPropagation()} onMouseOver={() => toggleUnknownPlayerView(+player.Wins + player.Losses + player.Points)} onMouseOut={() => toggleUnknownPlayerView(+player.Wins + player.Losses + player.Points)}>\r\n                                unknown player ?\r\n                                <div className={cl.unknownPlayerHint} style={unknownPlayerShowed == +player.Wins + player.Losses + player.Points ? {display: \"block\"} : {display: \"none\"}}>\r\n                                    Seems like Paladins API doesnt return nickname of this player, cause of player desire. We cant do anything to provide nickname of player for you.\r\n                                </div>\r\n                            </div>}\r\n                        </div>\r\n                        <div className={cl.ranking__item_points}>{player.Points} TP</div>\r\n                        <div className={cl.ranking__item_wins}>{player.Wins}</div>\r\n                        <div className={cl.ranking__item_losses}>{player.Losses}</div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Ranking;"]},"metadata":{},"sourceType":"module"}